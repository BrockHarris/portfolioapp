<div class="panel">
  <h1>RubyBtce Documentation</h1>

  <p>RubyBtce provides a simple and clean API wrapper for interfacing with the BTC-e API in a Rails app or CLI.</p>

	<h2>Installation</h2>

	Add this line to your application's Gemfile:
	<div class="code">gem 'RubyBtce'</div>

	And then execute:
	<div class="code">$ bundle</div>
    
	Or install it yourself as:
	<div class="code">$ gem install RubyBtce</div>
    

	Add the following file to <span class="code_txt">/config</span>, and name it <span class="code_txt">btce_api.yml</span>:
	<div class="code">
    # /{Rails.root}/config/btce_api.yml<br/><br/>

    key: 'your_api_key'<br/>
    secret: 'your_api_secret'
  </div>

	<h2>Usage</h2>

	<p>This gem provides class methods for all public/private API methods offered by BTC-e.
	All responses will be returned in a ruby hash format, closely following the structure shown in the BTC-e API <%= link_to "documentation", "https://btc-e.com/api/documentation" %>.</p>

	<h2>Public Methods</h2>

	<h3>Ticker <span class="code_snip">ticker(opts={})</span></h3>
	<div class="code">
    RubyBtce.ticker.btc_usd.last<br/>
    => 555.127<br/><br/>

    @pairs = RubyBtce.ticker("pairs"=>"btc_usd-ltc_usd")<br/>
    @pairs.each do |pair, info|<br/>
		&nbsp; pair<br/>
    &nbsp; => btc_usd<br/><br/>
      
    &nbsp; info.last<br/>
    &nbsp; => 555.127<br/>
    end
  </div>

  <h3>Pair Info <span class="code_snip">pair_info</span></h3>
  <div class="code">
    RubyBtce.pair_info.btc_usd.fee<br/>
    => 0.2
  </div>

  <h3>Depth <span class="code_snip">depth(limit)</span></h3>
  <div class="code">
    RubyBtce.depth(2).btc_usd.asks<br/>
    => [[554.32, 0.25], [554.329, 0.034]]
  </div>

  <h3>Order Book <span class="code_snip">order_book(limit)</span></h3>
  <div class="code">
    RubyBtce.order_book(2).btc_usd.first.price<br/>
    => 553 
  </div>

	<h2>Private Methods</h2>
	<h3>Account Info <span class="code_snip">account</span></h3>
	<div class="code">
    RubyBtce.account.funds.btc<br/>
    => 0.02199302 
  </div>

  <h3>New Trade <span class="code_snip">new_trade(opts={})</span></h3>
  <p>This method will take up the values for `rate` and `amount` in the format of a string, integer, or float. You can pass these parameters with any number of decimal places, which will automatically be cut off (not rounded) to the maximum number of places for the specific currency.</p>

  <div class="code">
    @trade = RubyBtce.new_trade("pair" => "btc_usd", "type" => "sell", "rate"=>"600", "amount"=>"0.02")<br/><br/>

    @trade.funds.btc<br/>
    => 0.00199302<br/><br/>

    @trade.order_id<br/>
    => 242304103
  </div>

  <h3>Cancel Trade <span class="code_snip">cancel(opts={})</span></h3>
    @trade = RubyBtce.cancel("order_id"=>242304103)<br/><br/>

    @trade.funds.usd<br/>
    => 50.35772684<br/><br/>

    @trade.order_id<br/>
    => 242304103

#### Active Orders `orders(opts={})`
    @orders = RubyBtce.orders("pair" => "btc_usd")<br/><br/>

    @orders.each do |id, order| <br/>
      id<br/>
      => 242304103<br/><br/>

      order.status<br/>
      => 0<br/>
    end

#### Trade History `trades(opts={})`
    @trades = RubyBtce.trades("pair" => "btc_usd")<br/><br/>

    @trades.each do |id, trade| <br/>
      id<br/>
      => 35308202<br/><br/>

      trade.order_id<br/>
      => 242304103<br/>
    end

#### Transaction History `transactions(opts={})`
    @transactions = RubyBtce.transactions("from_id" => "242304103", "end_id" => "242304103", "order" => "ASC")

    @transactions.each do |id, transaction| 
      id
      => 56116202

      transaction.desc
      => Bought 0.02 BTC from your order :order:242304103: by price 600 USD total 12 USD (-0.2%)
    end




</div>